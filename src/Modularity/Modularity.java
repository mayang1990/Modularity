package Modularity;

import Modularity.unsigned;
import Modularity.signed;

public class Modularity {
	public static void main(String[] args) {

		// 输入顶点和边的数组

		int[] vexs = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
				17, 18, 19, 20, 21, 22, 23, 324, 25, 26, 27, 28, 29, 30, 31,
				32, 33, 34 };
		int[][] edges = { { 0, 1 }, { 0, 2 }, { 0, 4 }, { 0, 3 }, { 0, 5 },
				{ 0, 6 }, { 0, 7 }, { 0, 8 }, { 0, 10 }, { 0, 11 }, { 0, 12 },
				{ 0, 13 }, { 0, 17 }, { 0, 21 }, { 0, 19 }, { 0, 31 },
				{ 1, 2 }, { 1, 3 }, { 1, 7 }, { 1, 13 }, { 1, 17 }, { 1, 19 },
				{ 1, 21 }, { 1, 30 }, { 2, 3 }, { 2, 7 }, { 2, 8 }, { 2, 9 },
				{ 2, 13 }, { 2, 27 }, { 2, 28 }, { 2, 32 }, { 3, 7 },
				{ 3, 12 }, { 3, 13 }, { 4, 6 }, { 4, 10 }, { 5, 6 }, { 5, 10 },
				{ 5, 16 }, { 6, 16 }, { 8, 30 }, { 8, 32 }, { 8, 33 },
				{ 9, 33 }, { 13, 33 }, { 14, 32 }, { 14, 33 }, { 15, 32 },
				{ 18, 32 }, { 18, 33 }, { 19, 32 }, { 20, 32 }, { 20, 33 },
				{ 22, 32 }, { 22, 33 }, { 23, 25 }, { 23, 27 }, { 23, 29 },
				{ 23, 32 }, { 23, 33 }, { 24, 25 }, { 24, 27 }, { 24, 31 },
				{ 25, 31 }, { 26, 29 }, { 26, 33 }, { 27, 33 }, { 28, 31 },
				{ 28, 33 }, { 29, 32 }, { 29, 33 }, { 30, 32 }, { 30, 33 },
				{ 31, 32 }, { 31, 33 }, { 32, 33 } };

		int[][] list = { { 1, 5, 17, 7, 11, 12, 6 },
				{ 2, 3, 4, 8, 13, 14, 18, 20, 22 }, { 9, 33, 31, 16 },
				{ 10, 15, 19, 21, 23, 24, 29, 32, 34, 30, 27 }, { 26, 28, 25 } };

		int[][] list1 = {
				{ 1, 5, 17, 7, 11, 12, 6, 2, 3, 4, 8, 13, 14, 18, 20, 22 },
				{ 9, 33, 31, 16, 10, 15, 19, 21, 23, 24, 29, 32, 34, 30, 27,
						26, 28, 25 } };

		int[] vexs2 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
		int[][] edges2 = { { 0, 1, 1 }, { 0, 2, 1 }, { 0, 3, 1 }, { 0, 4, -1 },
				{ 0, 5, -1 }, { 0, 7, -1 }, { 0, 9, -1 }, { 0, 11, -1 },
				{ 1, 2, 1 }, { 1, 3, 1 }, { 1, 4, -1 }, { 1, 7, -1 },
				{ 1, 11, -1 }, { 1, 13, -1 }, { 1, 14, -1 }, { 2, 3, 1 },
				{ 2, 8, -1 }, { 2, 9, -1 }, { 2, 11, -1 }, { 2, 13, -1 },
				{ 2, 14, -1 }, { 2, 15, -1 }, { 3, 7, -1 }, { 3, 8, -1 },
				{ 3, 9, -1 }, { 3, 11, -1 }, { 3, 12, -1 }, { 3, 15, -1 },
				{ 4, 5, 1 }, { 4, 6, 1 }, { 4, 7, 1 }, { 4, 10, 1 },
				{ 5, 6, 1 }, { 6, 7, 1 }, { 6, 8, 1 }, { 6, 9, 1 },
				{ 6, 10, 1 }, { 6, 12, -1 }, { 7, 8, 1 }, { 7, 9, 1 },
				{ 7, 10, 1 }, { 7, 13, -1 }, { 7, 15, -1 }, { 8, 9, 1 },
				{ 8, 10, 1 }, { 8, 13, -1 }, { 8, 14, -1 }, { 8, 15, -1 },
				{ 9, 10, 1 }, { 9, 12, -1 }, { 10, 11, 1 }, { 10, 15, 1 },
				{ 11, 12, 1 }, { 11, 13, 1 }, { 12, 15, 1 }, { 13, 14, 1 },
				{ 13, 15, 1 }, { 14, 15, 1 } };

		int[][] list2 = { { 2, 3, 4, 1 }, { 5, 7, 6 }, { 9, 10, 11, 8 },
				{ 13, 14, 12, 16, 15 } };
		int[][] list3 = { { 2, 3, 4, 1 }, { 5, 7, 6, 8, 9, 10, 11 },
				{ 13, 14, 12, 16, 15 } };

		unsigned pG1 = new unsigned(vexs, edges);
		signed pG2 = new signed(vexs2, edges2);

		pG1.print(); // 打印图
		pG2.print();

		pG1.cal_Q(list); // 输出模块度
		pG1.cal_Q(list1);
		pG2.cal_Q(list2);
		pG2.cal_Q(list3);

	}

}
